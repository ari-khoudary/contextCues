library(tidyverse)
library(patchwork)
library(emmeans)
# load data
outdir <- 'empirical_histograms/'
inference_df <- read.csv('inference_tidy.csv')
# tidy data
inference_df <- inference_df %>%
mutate(noise1Resp = ifelse(respPeriod==1, 1, 0),
choose1 = ifelse(response==1, 1, 0),
choose2 = ifelse(response==2, 1, 0),
cueConf_factor = factor(cueConfidence),
subjectiveCue = subjectiveCue/100,
trueCue = trueCue/100,
trueCongruence = factor(trueCongruence, levels=c('incongruent', 'neutral', 'congruent'))) %>%
filter(subID != c(33), catch_trial==0, zlogRT > -10) %>%
group_by(subID) %>%
mutate(cueCorr = cor(subjectiveCue, trueCue),
cueDiff = subjectiveCue - trueCue,
cueCorr_spearman = cor(subjectiveCue, trueCue, method = 'spearman'),
cueCorr_q = ntile(cueCorr, n=2),
cueCorr_sign = case_when(cueCorr < 0 ~ 'negative',
cueCorr > 0 ~ 'positive'))
find_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
inference_df %>%
ggplot(aes(x=RT, color=congCue, fill=congCue)) +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
geom_histogram(bins=50, alpha=0.5) +
facet_wrap(~ subID, nrow=3) +
labs(title = 'individual RT histograms', subtitle = 'boxes=mode noise durations')
noise1_mode <- find_mode(inference_df$noise1frames_design) / 72
noise2Onset_mode <- find_mode(inference_df$noise2Onset_design) / 72
signal2Onset_mode <- find_mode(inference_df$signal2Onset_design) / 72
inference_df %>%
ggplot(aes(x=RT, color=congCue, fill=congCue)) +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
geom_histogram(bins=50, alpha=0.5) +
facet_wrap(~ subID, nrow=3) +
labs(title = 'individual RT histograms', subtitle = 'boxes=mode noise durations')
inference_df %>%
mutate(congCue = factor(congCue)) %>%
ggplot(aes(x=RT, color=congCue, fill=congCue)) +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
geom_histogram(bins=50, alpha=0.5) +
facet_wrap(~ subID, nrow=3) +
labs(title = 'individual RT histograms', subtitle = 'boxes=mode noise durations')
inference_df %>%
mutate(trueCue = factor(trueCue)) %>%
ggplot(aes(x=RT, color=trueCue, fill=trueCue)) +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=0, ymax=70, alpha=0.5, fill='gray') +
geom_histogram(bins=50, alpha=0.5) +
facet_wrap(~ subID, nrow=3) +
labs(title = 'individual RT histograms', subtitle = 'boxes=mode noise durations')
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = inference_df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=congCue, color=factor(congCue))) +
geom_density(data = inference_df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=congCue, color=factor(congCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
facet_wrap(~subID, nrow=3) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = 'individual subject densities', subtitle = 'boxes=mode noise durations', x='RT (s)')
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = inference_df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = inference_df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
facet_wrap(~subID, nrow=3) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = 'individual subject densities', subtitle = 'boxes=mode noise durations', x='RT (s)')
noise1_mode <- find_mode(inference_df$noise1duration)
noise2Onset_mode <- find_mode(inference_df$noise2_onset)
signal2Onset_mode <- find_mode(inference_df$signal2_onset)
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = inference_df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = inference_df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
facet_wrap(~subID, nrow=3) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = 'individual subject densities', subtitle = 'boxes=mode noise durations', x='RT (s)')
noise2Onset_mode
noise2Onset_mode <- find_mode(inference_df$noise2_onset[inference_df$noise2_onset > 0])
noise2Onset_mode
signal2Onset_mode <- find_mode(inference_df$signal2_onset[inference_df$signal2_onset > 0])
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = inference_df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = inference_df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
facet_wrap(~subID, nrow=3) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = 'individual subject densities', subtitle = 'boxes=mode noise durations', x='RT (s)')
unique(inference_df$subID)[1]
for (subject in 21:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
facet_wrap(~subID, nrow=3) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)')
}
for (subject in 21:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
facet_wrap(~subID, nrow=3) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)')
}
for (subject in 21:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)')
}
length(inference_df$subID)
length(unique(inference_df$subID))
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue)))
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue)))
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)')
for (subject in 21:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)')
ggsave(paste0(outdir, 's', unique(inference_df$subID)[subject], '.png'), width=4, height=3)
}
for (subject in 1:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)')
ggsave(paste0(outdir, 's', unique(inference_df$subID)[subject], '.png'), width=5, height=3)
}
for (subject in 1:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)') +
xlim(0,4)
ggsave(paste0(outdir, 's', unique(inference_df$subID)[subject], '.png'), width=5, height=3)
}
for (subject in 1:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=after_stat(density)))
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)') +
xlim(0,4)
ggsave(paste0(outdir, 's', unique(inference_df$subID)[subject], '.png'), width=5, height=3)
}
for (subject in 1:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=after_stat(density))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)') +
xlim(0,4)
ggsave(paste0(outdir, 's', unique(inference_df$subID)[subject], '.png'), width=5, height=3)
}
for (subject in 1:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.5, fill='gray') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density))) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)') +
xlim(0,4)
ggsave(paste0(outdir, 's', unique(inference_df$subID)[subject], '.png'), width=5, height=3)
}
for (subject in 1:length(unique(inference_df$subID))) {
# get subject-specific noise info
df <- inference_df %>% filter(subID == unique(inference_df$subID)[subject])
noise1_mode <- find_mode(df$noise1duration)
noise2Onset_mode <- find_mode(df$noise2_onset[df$noise2_onset > 0])
signal2Onset_mode <- find_mode(df$signal2_onset[df$signal2_onset > 0])
# plot
ggplot() +
theme_bw() +
annotate('rect', xmin=0, xmax=noise1_mode, ymin=-1, ymax=1, alpha=0.25, fill='lightblue') +
annotate('rect', xmin=noise2Onset_mode, xmax=signal2Onset_mode, ymin=-1, ymax=1, alpha=0.25, fill='lightblue') +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density), group=trueCue, color=factor(trueCue))) +
geom_density(data = df %>% filter(accuracy == 1), aes(x=RT, y=after_stat(density)), linewidth=1) +
geom_density(data = df %>% filter(accuracy == 0), aes(x=RT, y=-after_stat(density)), linewidth=1) +
scale_y_continuous(name = "scaled density", labels = function(x) abs(x), n.breaks = 6) +
geom_hline(yintercept = 0, linetype = "solid", color = "black") +
labs(title = paste0('subject ', unique(inference_df$subID)[subject]), subtitle = 'boxes=mode noise durations', x='RT (s)') +
xlim(0,4)
ggsave(paste0(outdir, 's', unique(inference_df$subID)[subject], '.png'), width=5, height=3)
}
